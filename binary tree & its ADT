/*
 类型名称：二叉树
 数据对象集：一个有穷的结点集合。
           若不为空，则由根结点和左、右二叉子树组成。
 操作集：BT属于BinTree，Item属于ElementType，重要操作有：
        1、Boolean IsEmpty（BinTree BT）；判别BT是否为空。
        2、void Traversal（BinTree BT）；遍历，按某顺序访问某个结点。
        3、BinTree CreatBinTree（）；创建一个二叉树。、
 
 常用的遍历方法有：
     void PreOrderTraversal( BinTree BT ) ： 先序---- 根、左子树、右子树；
     void InOrderTraversal( BinTree BT ) ： 中序--- 左子树、根、右子树；
     void PostOrderTraversal( BinTree BT ) ： 后序--- 左子树、右子树、根
     void LevelOrderTraversal( BinTree BT ) ： 层次遍历 ，从上到下、从左到右
    
 存储结构
    1、顺序存储结构
        完全二叉树
        一般二叉树
    2、链表存储
    
 */
 
 /*
  二叉搜索树（BST,Binary Search Tree）/二叉排序树/二叉查找树
  
  二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质：
    1.  非空 左子树 的所有 键值小于其根结点 的键值。
    2.  非空 右子树 的所有 键值大于其根结点 的键值。
    3.  左、右子树都是二叉搜索树 
  
  静态查找
  动态查找
  
  二叉搜索树操作的特别函数：
    Position Find( ElementType X, BinTree BST ) ：从二叉搜索树BST中查找元素X ，返回其所在结点的地址；
    Position FindMin( BinTree BST ) ：从二叉搜索树BST 中查找并返回最小元素所在结点的地址；
    Position FindMax( BinTree BST )  ：从二叉搜索树BST 中查找并返回最大元素所在结点的地址。
    BinTree Insert( ElementType X, BinTree BST )
    BinTree Delete( ElementType X, BinTree BST )
  */
