typedef struct B_tree{
	int data;
	struct B_tree *right;
	struct B_tree *left;
}*b_tree_p;

/**
 *功能：创建一个二叉树
 */
BTNodePtr createBT(){
	char c;
	
	BTNodePtr temp;
	
	puts("create node or not(y or n):");
	scanf("%c",&c);
	if(c=='n'){
		temp=NULL;
	}else{
		temp=(BTNodePtr)malloc(sizeof(BTNode));
		puts("input data:");
		scanf("%d",temp->data);
		temp->left=createBT();
		temp->right=createBT();
	}
	
	return temp;
}

/**
 *功能：创建一个完全二叉树链表
 *注意事项：传入的是根节点，根节点所指内存空间在函数外已分配
 */
void creat_binary_tree(b_tree_p head){
	char flag;
	
	head->right=NULL;
	head->left=NULL;
	
	puts("put A letter,y means going on");
	flag=getchar();
	fflush(stdin);//及时在输入字符之后清屏，可以避免使用循环时出现难以理解的自动进入的循环
	
	if(flag=='y'){//这个地方是if，不用while！！
		head->right=(b_tree_p)malloc(sizeof(struct B_tree));
		if(head->right){
			head->right->data=head->data*2;
			printf("%d has established!\n",head->right->data);
			creat_binary_tree(head->right);	
		}else{
			exit(1);
		}
		
		head->left=(b_tree_p)malloc(sizeof(struct B_tree));
		if(head->left){
			(head->left)->data=head->data*2+1;
			printf("%d has established!\n",head->left->data);
			creat_binary_tree(head->left);
		}else{
			exit(1);
		}
	}
	return ;
}

/**
 *功能：遍历完全二叉树
 *此处是递归遍历，另外还有使用堆栈的非递归遍历的写法 
 *我的写法，下面使用的是老师的写法，好像更简洁一些，判断次数好像相同：
 *	void traversal_b_t(b_tree_p head){
		printf("\nthis node is %d-th\n",head->data);
		if(head->right){
			traversal_b_t(head->right);	
		}
		if(head->left){
			traversal_b_t(head->left);	
		}
	}
 */
void traversal_b_t(b_tree_p head){
	if(head){
		printf("\nthis node is %d-th\n",head->data);
		traversal_b_t(head->right);	
		traversal_b_t(head->left);	
	}
}

void traversal_b_t2(b_tree_p head){
	printf("\nthis node is %d-th\n",head->data);
	if(head->right){
		traversal_b_t(head->right);	
	}
	if(head->left){
		traversal_b_t(head->left);	
	}
}
//-------------------------------------------------------------
/*
 *树
 */

//树的静态二分查找
//我写的
struct Tbl{
	int arr[];
	int lenA;
}*tbl;
int search(staticTable *tbl,int k){
	int i=tbl->lenA/2;
	int left=0,right=tbl->lenA-1;
	while{left<right}{
		if(tbl->arr[i]=k){
			return i;
		}else if(tbl->arr[i]<k){
			right=i;
			i=i/2;//错的，因为left不总是0
		}else{
			left=i;//当左右只差一个数时，left+right除2总得left，i和left相互赋值，循环不能结束，所以这里也出错
			i=(left+right)/2;
		}
	}
	if(left==right&&tbl->arr[left]==k){
		return left;
	}
	return -1;
}
//示例
int BinarySearch(StaticTable *Tbl,ElementType K)
{//在表Tbl中查找关键字为K的数据元素
	int left,right,mid,NoFound=-1;
	
	left=1;
	righ=Tbl->Length;
	while(left<=right){
		mid=(left+right)/2;
		if(K<Tbl->ElementType[mid]){
			right=mid-1;
		}else if(K>Tbl->ElementType[mid]){
			left=mid+1;
		}else{
			return mid;
		}
	}
	return NoFound;
}

//建一个二叉树
typedef struct TreeNode *BinTree;
typedef BinTree Position;
struct TreeNode{
	ElementType Data;
	BinTree Left;
	BinTree Right;
}

//递归
//先序遍历
void PreOrderTraversal(BinTree BT)
{
	if(BT){
		printf("%d",BT->Data);
		PreOrderTraversal(BT->Left);
		PreOrderTraversal(BT->Right);
	}
}
//中序遍历
void InOrderTraversal(BinTree BT)
{
	if(BT){
		InOrderTraversal(BT->Left);
		printf("%d",BT->Data);
		InOrderTraversal(BT->Right);
	}
}
//后序遍历，递归时不需要堆栈！！
void PostOrderTraversal(BinTree BT)
{
	if(BT){
		PostOrderTraversal(BT->Left);
		PostOrderTraversal(BT->Right);
		printf("%d",BT->Data);
	}
}

//堆栈
//
BinTree a[i];
i=0;

//先序遍历
//我写的
void PreOrderTraversal(BinTree BT)
{
	while(BT){
		while(BT){
			printf("%d",BT->Data);
			BinTree[i++]=BT;
			BT=BT->Left;
		}
		if(i<1){
			return;
		}
		BT=BinTree[--i];
		while(!BT->Right){
			if(i<1){
				return;
			}
			BT=BinTree[--i];
		}
		BT=BT->Right;
	}
}
//示例
void PreOrderTraversal(BinTree BT)
{
	BinTree T=BT;
	Stack S=CreatStack(MaxSize);
	while(T||!IsEmpty(S)){
		while(T){
			printf("%d",T->Data);
			Push(S,T);
			T=T->Left;
		}
		if(!IsEmpty(S)){
			T=Pop(S);
			T=T->Right;
		}
	}
}

//中序遍历非递归
//示例
void InOrderTraversal(BinTree BT)
{
	BinTree T=BT;
	Stack S=CreatStack(MaxSize);
	while(T||!IsEmpty(S)){
		while(T){
			Push(S,T);
			T=T->Left;
		}
		if(!IsEmpty(S)){
			T=Pop(S);
			printf("%d",T->Data);
			T=T->Right;
		}
	}
}

//后序遍历非递归
//?怎么写




